name: "Release, Please!"

on:
  push:
    branches:
      - main

permissions:
  packages: write
  contents: write
  pull-requests: write
  id-token: write

jobs:
  makeRelease:
    name: Process Commits
    runs-on: ubuntu-latest
    outputs:
      releases_create: ${{ steps.release.outputs.releases_created }}
      paths_released: ${{ steps.release.outputs.paths_released }}
      packages: ${{ steps.releaseData.outputs.result }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          command: manifest
          token: ${{secrets.GITHUB_TOKEN}}
          default-branch: main

      - name: Echo results
        run: |
          RESULT=$(cat << EOM
          ${{ toJSON(steps.release.outputs) }}
          EOM
          )
          echo "$RESULT"

      - name: Dump context
        uses: actions/github-script@v6
        with:
          script: |
            console.log(${{ toJSON(steps.release.outputs) }});

      - name: Make list of releases for downstream
        id: releaseData
        if: ${{ steps.release.outputs.paths_released != '[]' && steps.release.outputs.paths_released != '' }}
        uses: actions/github-script@v6
        with:
          script: |
            const paths_released = ${{ steps.release.outputs.paths_released }} || [];
            const release = ${{ toJSON(steps.release.outputs) }};
            const packages = [];
            for (const releasePath of paths_released) {
              const tag = release[`${releasePath}--tag_name`];
              const version = release[`${releasePath}--version`];
              const [name] = String(release[`${releasePath}--name`]).split(':');

              packages.push({
                path: releasePath,
                name,
                tag,
                version
              });
            }
            console.log(packages);
            return packages;


  publish:
    runs-on: ubuntu-latest
    name: Publish Packages
    needs: makeRelease

    if: ${{ needs.makeRelease.outputs.paths_released != '[]' && needs.makeRelease.outputs.paths_released != '' }}

    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.makeRelease.outputs.packages) }}

    env:
      PROJECT_ID: zen-dev-166315
      GAR_LOCATION: us-central1
      GAR_REPOSITORY: zen-npm-packages

    steps:
      - name: Echo package info
        run: |
          RESULT=$(cat << EOM
          path: ${{ matrix.package.path }}
          name: ${{ matrix.package.name }}
          packageName: ${{ matrix.package.packageName }}
          tag: ${{ matrix.package.tag }}
          version: ${{ matrix.package.version }}
          EOM
          )
          echo "$RESULT"

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: "0"
          token: ${{secrets.GH_PUBLISH_TOKEN_ADM}}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: npm

    # Authenticate with GCP and publish to Google Registry

      - id: auth
        name: 'Authenticate to Google Cloud'
        uses: google-github-actions/auth@v0
        with:
          token_format: "access_token"
          workload_identity_provider: "projects/124977349912/locations/global/workloadIdentityPools/github-actions/providers/github"
          service_account: "sa-github-actions@zen-dev-166315.iam.gserviceaccount.com"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Writeout GAR npmrc
        run: |
          gcloud artifacts print-settings npm \
            --project=${{ env.PROJECT_ID }} \
            --repository=${{ env.GAR_REPOSITORY }} \
            --location=${{ env.GAR_LOCATION }} \
            --scope=@zenbusiness > .npmrc
          find . -path "packages/*" -type d -exec cp .npmrc {} \;

      - name: Authorize NPM to Publish for Google Cloud
        run: npx google-artifactregistry-auth

    # Install and build

      - name: Install dependencies from npm
        run: npm ci --workspace=${{ matrix.package.path }}

      - name: Build packages
        run: npm run build --workspace=${{ matrix.package.path }} --if-present

      - name: Build docs
        run: npm run docs --workspace=${{ matrix.package.path }} --if-present

    # Publish to GAR

      - name: Publish to ZenBusiness Google Cloud npm artifact registry
        run: |
          npm publish --workspace=${{ matrix.package.path }}

    # Publish to Github Registry

      - run: rm .npmrc

      - name: Configure publishing to ZenBusiness Private Github Packages
        run: |
          npm config set '@zenbusiness:registry' 'https://npm.pkg.github.com/'
          npm config set '//npm.pkg.github.com/:_authToken' "${NODE_AUTH_TOKEN}"
        env:
          NODE_AUTH_TOKEN: ${{secrets.secrets.READ_GH_PKGS_NPM_TOKEN}}

      - run: find . -path "packages/*" -type d -exec cp .npmrc {} \;

      - name: Publish to Github Registry
        run: npm publish --workspace=${{ matrix.package.path }} --registry='https://npm.pkg.github.com/'
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
          NPM_TOKEN: ${{secrets.GH_PUBLISH_TOKEN_ADM}}
          NODE_AUTH_TOKEN: ${{secrets.GH_PUBLISH_TOKEN_ADM}}

    # Builds Finished

      - name: Rollback Release if publish failed
        if: failure()
        uses: author/action-rollback@master
        with:
          tag: ${{ matrix.package.tag }}
          delete_orphan_tag: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload the build artifact for debug
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.package.tag }}
          path: |
            *
            !node_modules/*
          retention-days: 1
